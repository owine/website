{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello, I'm Pullio! Welcome \u00b6 Go check out the rest of our website to see how you can get started with your favorite app. Most images come with docker cli or compose examples. If you've got any questions, feel free to join the discord server. Discord is our main channel to provide support, if you think to have found a bug in one of the images, feel free to create a new issue on GitHub. If you enjoy the images don't forget to go give us a star on Docker Hub and GitHub . It would mean a lot to us! Support \u00b6 Join us on Discord! Donations \u00b6 If you like what I do, you know the drill... GitHub Sponsors Open Collective Nano Bitcoin Litecoin","title":"Home"},{"location":"#welcome","text":"Go check out the rest of our website to see how you can get started with your favorite app. Most images come with docker cli or compose examples. If you've got any questions, feel free to join the discord server. Discord is our main channel to provide support, if you think to have found a bug in one of the images, feel free to create a new issue on GitHub. If you enjoy the images don't forget to go give us a star on Docker Hub and GitHub . It would mean a lot to us!","title":"Welcome"},{"location":"#support","text":"Join us on Discord!","title":"Support"},{"location":"#donations","text":"If you like what I do, you know the drill... GitHub Sponsors Open Collective Nano Bitcoin Litecoin","title":"Donations"},{"location":"arr-discord-notifier/","text":"Let's SPAM somebody! GitHub Arr Discord Notifier sends pretty notifications to a discord webhook. The Radarr and Sonarr v3 (only v3 is supported) docker images come bundled with this script, but it can also be used on its own. Configuration \u00b6 Add a Custom Script to the Connect settings in Sonarr/Radarr as seen below. Then add the environment variable DISCORD_WEBHOOK with your webhook url provided by Discord to the container. After that hit the Test button and you should see a notification appear in your discord channel. If you also configure the environment variable TMDB_API_KEY , when possible it will use an episode still as a backdrop image and add a Cast field. If you want to hide some fields, you can use DROP_FIELDS=\"backdrop overview release airdate\" as a variable, all field names in lowercase, backdrop and poster are valid values too. Sending to multiple webhooks can be done with additional variables like DISCORD_WEBHOOK_0 and DROP_FIELDS_0 . By default the hostname is used as the Author of the notification, you can modify this by changing the hostname or the variable AUTHOR_NAME . Sample images \u00b6","title":"Arr Discord Notifier"},{"location":"arr-discord-notifier/#configuration","text":"Add a Custom Script to the Connect settings in Sonarr/Radarr as seen below. Then add the environment variable DISCORD_WEBHOOK with your webhook url provided by Discord to the container. After that hit the Test button and you should see a notification appear in your discord channel. If you also configure the environment variable TMDB_API_KEY , when possible it will use an episode still as a backdrop image and add a Cast field. If you want to hide some fields, you can use DROP_FIELDS=\"backdrop overview release airdate\" as a variable, all field names in lowercase, backdrop and poster are valid values too. Sending to multiple webhooks can be done with additional variables like DISCORD_WEBHOOK_0 and DROP_FIELDS_0 . By default the hostname is used as the Author of the notification, you can modify this by changing the hostname or the variable AUTHOR_NAME .","title":"Configuration"},{"location":"arr-discord-notifier/#sample-images","text":"","title":"Sample images"},{"location":"faq/","text":"I'm here if you need me... Troubleshooting \u00b6 Someone asked you for a 'docker-compose' snippet...How do you give them that? If you are not using docker-compose that can sound like a daunting task. Have no fear though, the following cli command spits it out. docker run --rm -v /var/run/docker.sock:/var/run/docker.sock:ro ghcr.io/red5d/docker-autocompose <container-name-or-id> [ <additional-names-or-ids> ] Now you should upload this to something like hastebin.com , pastebin.com , github.com or any other site that provides easy sharing of text files. If you are sure that there's no personal information to be seen, you can also use the command below and provide them the link. docker run --rm -v /var/run/docker.sock:/var/run/docker.sock:ro ghcr.io/red5d/docker-autocompose <container-name-or-id> [ <additional-names-or-ids> ] | curl -H \"x-uuid;\" --upload-file - 'https://paste.c-net.org/' What is this libseccomp2 thing I keep hearing about? Am I affected by it? If you are running Raspbian/Raspberry Pi OS (key part here, it being arm 32-bit), your docker container all of a sudden stops working and you appear to be the only person in the world to have this happen... Rest assured you are not alone. The issue here is that you are probably running an outdated version of libseccomp2. The symptom can vary in many ways depending on the app. Radarr for example does nothing (no error or anything), Mylar3 gives this Fatal Python error: pyinit_main: can't initialize time , Overseerr gives you Fatal error in , line 0 , docker exec <container-name> date returns 1970 and the list goes on. The fastest way to detect if that is indeed your issue is by running the container in --privileged mode (I understand that you are not comfortable with this, and you should avoid running privileged at all costs), if it works after doing this, you now know you're a victim too. If you really don't like doing this, doing docker exec <container-name> date might confirm it too if you are 100% sure your system date is working as expected. Several solutions: Upgrade your OS to Ubuntu 20.04 arm64 image (found here ). Manually update libseccomp2 (found here ). wget http://ftp.us.debian.org/debian/pool/main/libs/libseccomp/libseccomp2_2.5.1-1_armhf.deb sudo dpkg -i libseccomp2_2.5.1-1_armhf.deb Keep running with --privileged , not recommended though. The prefered way here is going with Ubuntu + ARM64 if you can. Info Make sure you are running the latest Docker Engine . Installation \u00b6 How do I install 'docker-compose' on my machine? There's all sorts of ways to do this, here we are going to pick the easy way. The following commands will download and install a wrapper script that uses the docker image linuxserver/docker-compose . sudo curl -fsSL https://raw.githubusercontent.com/linuxserver/docker-docker-compose/master/run.sh > /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose Now you should be able to do docker-compose --version as if it were natively installed. This script doesn't pull for the latest image though everytime it runs, so it might be a good idea to once in a while purge the image. It'll then pull a new one the next time it runs. Installing Docker, how and where? I'd have a look at the official Docker Engine installation instructions. Guides \u00b6 I would like to execute my own scripts on startup, how would I do this? This will only work for containers using s6 overlay , recognisable by ENVIRONMENT printed at the top of the log when the container starts. If you have a need to do additional stuff when the container starts or stops, you can mount your script with the volume /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. 1 2 3 #!/command/with-contenv bash echo \"Hello, this is me, your script.\" How do I use this 'docker-compose' to start all my apps? First you'll need to create a file called docker-compose.yml in a location that you like, adjust below example to your liking. cd ~/ mkdir ./compose nano ./compose/docker-compose.yml Now you can copy/paste your services into this file. See example below. Don't forget to adjust or add more volumes and set the environment variables according to your situation. version: \"3.7\" services: cloudflareddns: container_name: cloudflareddns image: hotio/cloudflareddns environment: - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - INTERVAL=300 - DETECTION_MODE=dig-whoami.cloudflare - LOG_LEVEL=3 - cloudflareddns - CF_USER=your.cf.email@example.com - CF_APIKEY=your.global.apikey - CF_APITOKEN - CF_APITOKEN_ZONE - CF_HOSTS=test.example.com;test.foobar.com;test2.foobar.com - CF_ZONES=example.com;foobar.com;foobar.com - CF_RECORDTYPES=A;A;AAAA volumes: - /<host_folder_config>:/config restart: unless-stopped qflood: container_name: qflood image: hotio/qflood ports: - \"8080:8080\" - \"3000:3000\" environment: - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - FLOOD_AUTH=false volumes: - /<host_folder_config>:/config restart: unless-stopped If we now do cd ~/compose , followed by docker-compose up -d all our containers should start. To bring everything down, you can do docker-compose down . If we want to update them, we do docker-compose pull followed by docker-compose up -d . When making adjustments to our docker-compose.yml file, we do docker-compose up -d and all containers that had modifications will be recreated. How can I get a static IP for one of my containers using 'docker-compose'? Here's a basic docker-compose example that sets up a custom network and gives the plex container a static IP. version: \"3.7\" networks: my-custom-network: name: my-custom-network driver: bridge ipam: driver: default config: - subnet: 10.1.0.0/24 services: plex: container_name: plex image: hotio/plex ports: - \"32400:32400\" networks: my-custom-network: ipv4_address: 10.1.0.100 ... radarr: container_name: radarr image: hotio/radarr ports: - \"7878:7878\" networks: - my-custom-network ... How do I route a container's traffic through a VPN container? Small docker-compose example below. Notice the ... , this isn't a copy/paste ready to go example. version: \"3.7\" services: qbittorrent: container_name: qbittorrent image: hotio/qbittorrent ports: - \"8080:8080\" - \"9117:9117\" environment: ... - VPN_ADDITIONAL_PORTS=9117/tcp,9117/udp ... jackett: container_name: jackett image: hotio/jackett network_mode: \"service:qbittorrent\" ... Got any Docker guides? Take a look here for an extensive guide on best practises from the *arr team. But, but, how do I configure all this stuff? Maybe TRaSH from TRaSH Guides can help...","title":"FAQ"},{"location":"faq/#troubleshooting","text":"Someone asked you for a 'docker-compose' snippet...How do you give them that? If you are not using docker-compose that can sound like a daunting task. Have no fear though, the following cli command spits it out. docker run --rm -v /var/run/docker.sock:/var/run/docker.sock:ro ghcr.io/red5d/docker-autocompose <container-name-or-id> [ <additional-names-or-ids> ] Now you should upload this to something like hastebin.com , pastebin.com , github.com or any other site that provides easy sharing of text files. If you are sure that there's no personal information to be seen, you can also use the command below and provide them the link. docker run --rm -v /var/run/docker.sock:/var/run/docker.sock:ro ghcr.io/red5d/docker-autocompose <container-name-or-id> [ <additional-names-or-ids> ] | curl -H \"x-uuid;\" --upload-file - 'https://paste.c-net.org/' What is this libseccomp2 thing I keep hearing about? Am I affected by it? If you are running Raspbian/Raspberry Pi OS (key part here, it being arm 32-bit), your docker container all of a sudden stops working and you appear to be the only person in the world to have this happen... Rest assured you are not alone. The issue here is that you are probably running an outdated version of libseccomp2. The symptom can vary in many ways depending on the app. Radarr for example does nothing (no error or anything), Mylar3 gives this Fatal Python error: pyinit_main: can't initialize time , Overseerr gives you Fatal error in , line 0 , docker exec <container-name> date returns 1970 and the list goes on. The fastest way to detect if that is indeed your issue is by running the container in --privileged mode (I understand that you are not comfortable with this, and you should avoid running privileged at all costs), if it works after doing this, you now know you're a victim too. If you really don't like doing this, doing docker exec <container-name> date might confirm it too if you are 100% sure your system date is working as expected. Several solutions: Upgrade your OS to Ubuntu 20.04 arm64 image (found here ). Manually update libseccomp2 (found here ). wget http://ftp.us.debian.org/debian/pool/main/libs/libseccomp/libseccomp2_2.5.1-1_armhf.deb sudo dpkg -i libseccomp2_2.5.1-1_armhf.deb Keep running with --privileged , not recommended though. The prefered way here is going with Ubuntu + ARM64 if you can. Info Make sure you are running the latest Docker Engine .","title":"Troubleshooting"},{"location":"faq/#installation","text":"How do I install 'docker-compose' on my machine? There's all sorts of ways to do this, here we are going to pick the easy way. The following commands will download and install a wrapper script that uses the docker image linuxserver/docker-compose . sudo curl -fsSL https://raw.githubusercontent.com/linuxserver/docker-docker-compose/master/run.sh > /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose Now you should be able to do docker-compose --version as if it were natively installed. This script doesn't pull for the latest image though everytime it runs, so it might be a good idea to once in a while purge the image. It'll then pull a new one the next time it runs. Installing Docker, how and where? I'd have a look at the official Docker Engine installation instructions.","title":"Installation"},{"location":"faq/#guides","text":"I would like to execute my own scripts on startup, how would I do this? This will only work for containers using s6 overlay , recognisable by ENVIRONMENT printed at the top of the log when the container starts. If you have a need to do additional stuff when the container starts or stops, you can mount your script with the volume /docker/host/my-script.sh:/etc/cont-init.d/99-my-script to execute your script on container start or /docker/host/my-script.sh:/etc/cont-finish.d/99-my-script to execute it when the container stops. An example script can be seen below. 1 2 3 #!/command/with-contenv bash echo \"Hello, this is me, your script.\" How do I use this 'docker-compose' to start all my apps? First you'll need to create a file called docker-compose.yml in a location that you like, adjust below example to your liking. cd ~/ mkdir ./compose nano ./compose/docker-compose.yml Now you can copy/paste your services into this file. See example below. Don't forget to adjust or add more volumes and set the environment variables according to your situation. version: \"3.7\" services: cloudflareddns: container_name: cloudflareddns image: hotio/cloudflareddns environment: - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - INTERVAL=300 - DETECTION_MODE=dig-whoami.cloudflare - LOG_LEVEL=3 - cloudflareddns - CF_USER=your.cf.email@example.com - CF_APIKEY=your.global.apikey - CF_APITOKEN - CF_APITOKEN_ZONE - CF_HOSTS=test.example.com;test.foobar.com;test2.foobar.com - CF_ZONES=example.com;foobar.com;foobar.com - CF_RECORDTYPES=A;A;AAAA volumes: - /<host_folder_config>:/config restart: unless-stopped qflood: container_name: qflood image: hotio/qflood ports: - \"8080:8080\" - \"3000:3000\" environment: - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - FLOOD_AUTH=false volumes: - /<host_folder_config>:/config restart: unless-stopped If we now do cd ~/compose , followed by docker-compose up -d all our containers should start. To bring everything down, you can do docker-compose down . If we want to update them, we do docker-compose pull followed by docker-compose up -d . When making adjustments to our docker-compose.yml file, we do docker-compose up -d and all containers that had modifications will be recreated. How can I get a static IP for one of my containers using 'docker-compose'? Here's a basic docker-compose example that sets up a custom network and gives the plex container a static IP. version: \"3.7\" networks: my-custom-network: name: my-custom-network driver: bridge ipam: driver: default config: - subnet: 10.1.0.0/24 services: plex: container_name: plex image: hotio/plex ports: - \"32400:32400\" networks: my-custom-network: ipv4_address: 10.1.0.100 ... radarr: container_name: radarr image: hotio/radarr ports: - \"7878:7878\" networks: - my-custom-network ... How do I route a container's traffic through a VPN container? Small docker-compose example below. Notice the ... , this isn't a copy/paste ready to go example. version: \"3.7\" services: qbittorrent: container_name: qbittorrent image: hotio/qbittorrent ports: - \"8080:8080\" - \"9117:9117\" environment: ... - VPN_ADDITIONAL_PORTS=9117/tcp,9117/udp ... jackett: container_name: jackett image: hotio/jackett network_mode: \"service:qbittorrent\" ... Got any Docker guides? Take a look here for an extensive guide on best practises from the *arr team. But, but, how do I configure all this stuff? Maybe TRaSH from TRaSH Guides can help...","title":"Guides"},{"location":"pullio/","text":"I can do things... GitHub Updating your docker containers the easy way. Pullio is a bash script that you execute with cron, jobber , a systemd timer or any other way that you prefer, it then does a docker-compose pull for all the containers configured to have notifications or updates enabled. It then checks if there's an update available and takes action according to your configuration. As you might have already guessed it, this script relies on docker-compose to do the heavy lifting and thus is only compatible with docker-compose managed containers. Features: Discord notifications (see below for preview) No notifications if you leave the webhook out, it'll run as an updater and script executer Detailed info about what has changed for images that follow the Opencontainers Annotation Keys Execute script before sending notification Execute script before updating container, after container is stopped Private registries With --tag you can use seperate configs for hourly \"Update available\" notifications and on a daily schedule actually apply the updates Installation \u00b6 sudo curl -fsSL \"https://raw.githubusercontent.com/hotio/pullio/master/pullio.sh\" -o /usr/local/bin/pullio sudo chmod +x /usr/local/bin/pullio Now execute it however and whenever you want. Configuration \u00b6 You configure the script its behaviour by adding one or more of the following labels to your docker-compose.yml for every container you want. Adding no discord webhook will disable the notifications. ... labels: - \"org.hotio.pullio.notify=true\" - \"org.hotio.pullio.update=true\" - \"org.hotio.pullio.discord.webhook=https://discord.com/api/webhooks/...\" - \"org.hotio.pullio.generic.webhook=https://some.domain.com/api/webhooks/...\" - \"org.hotio.pullio.author.avatar=https://domain.com/logo.png\" - \"org.hotio.pullio.script.notify=bash /notify-script.sh\" - \"org.hotio.pullio.script.update=bash /update-script.sh\" - \"org.hotio.pullio.registry.authfile=/authfile.txt\" Using --tag mytag , would let you do the following. ... labels: - \"org.hotio.pullio.mytag.notify=true\" - \"org.hotio.pullio.mytag.discord.webhook=https://discord.com/api/webhooks/...\" If you need to provide credentials for a Private Registry, this file's content needs to be as shown below. { \"registry\": \"ghcr.io\", \"username\": \"your_username\", \"password\": \"your_password\" } Troubleshooting \u00b6 It can be frustrating to test the script if no docker image updates are available, for that you can do ./pullio.sh --debug and the script will behave as if an update is available. Notification preview \u00b6","title":"Pullio"},{"location":"pullio/#installation","text":"sudo curl -fsSL \"https://raw.githubusercontent.com/hotio/pullio/master/pullio.sh\" -o /usr/local/bin/pullio sudo chmod +x /usr/local/bin/pullio Now execute it however and whenever you want.","title":"Installation"},{"location":"pullio/#configuration","text":"You configure the script its behaviour by adding one or more of the following labels to your docker-compose.yml for every container you want. Adding no discord webhook will disable the notifications. ... labels: - \"org.hotio.pullio.notify=true\" - \"org.hotio.pullio.update=true\" - \"org.hotio.pullio.discord.webhook=https://discord.com/api/webhooks/...\" - \"org.hotio.pullio.generic.webhook=https://some.domain.com/api/webhooks/...\" - \"org.hotio.pullio.author.avatar=https://domain.com/logo.png\" - \"org.hotio.pullio.script.notify=bash /notify-script.sh\" - \"org.hotio.pullio.script.update=bash /update-script.sh\" - \"org.hotio.pullio.registry.authfile=/authfile.txt\" Using --tag mytag , would let you do the following. ... labels: - \"org.hotio.pullio.mytag.notify=true\" - \"org.hotio.pullio.mytag.discord.webhook=https://discord.com/api/webhooks/...\" If you need to provide credentials for a Private Registry, this file's content needs to be as shown below. { \"registry\": \"ghcr.io\", \"username\": \"your_username\", \"password\": \"your_password\" }","title":"Configuration"},{"location":"pullio/#troubleshooting","text":"It can be frustrating to test the script if no docker image updates are available, for that you can do ./pullio.sh --debug and the script will behave as if an update is available.","title":"Troubleshooting"},{"location":"pullio/#notification-preview","text":"","title":"Notification preview"},{"location":"containers/autoscan/","text":"GitHub docker.io / ghcr.io Autoscan 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name autoscan \\ -p 3030 :3030 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e PLEX_LOGIN = \"\" \\ -e PLEX_PASSWORD = \"\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/autoscan version : \"3.7\" services : autoscan : container_name : autoscan image : cr.hotio.dev/hotio/autoscan ports : - \"3030:3030\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - PLEX_LOGIN - PLEX_PASSWORD volumes : - /<host_folder_config>:/config If PLEX_LOGIN + PLEX_PASSWORD are not empty and the file /config/plex.token does not exist, an attempt is made to get a Plex token for Autoscan. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit. Using a secure Plex connection \u00b6 If you want to keep using secure connections within Plex, but don't wanna buy your own domain and keep the connection between Autoscan and Plex inside of their Docker network. Follow the below procedure. Go to https://plex.tv/pms/resources.xml?includeHttps=1&X-Plex-Token=xxxxxxxxxxxxxx (replace xxxxxxxxxxxxxx with your token) and look for a url that looks like https://10-1-0-100.xxxxxxxxxxxxx.plex.direct:32400 . That url can be used in your Autoscan plex target. You should however give the Plex container a static IP if you don't wanna do this every 5 minutes.","title":"hotio/autoscan"},{"location":"containers/autoscan/#starting-the-container","text":"cli compose docker run --rm \\ --name autoscan \\ -p 3030 :3030 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e PLEX_LOGIN = \"\" \\ -e PLEX_PASSWORD = \"\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/autoscan version : \"3.7\" services : autoscan : container_name : autoscan image : cr.hotio.dev/hotio/autoscan ports : - \"3030:3030\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - PLEX_LOGIN - PLEX_PASSWORD volumes : - /<host_folder_config>:/config If PLEX_LOGIN + PLEX_PASSWORD are not empty and the file /config/plex.token does not exist, an attempt is made to get a Plex token for Autoscan.","title":"Starting the container"},{"location":"containers/autoscan/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/autoscan/#using-a-secure-plex-connection","text":"If you want to keep using secure connections within Plex, but don't wanna buy your own domain and keep the connection between Autoscan and Plex inside of their Docker network. Follow the below procedure. Go to https://plex.tv/pms/resources.xml?includeHttps=1&X-Plex-Token=xxxxxxxxxxxxxx (replace xxxxxxxxxxxxxx with your token) and look for a url that looks like https://10-1-0-100.xxxxxxxxxxxxx.plex.direct:32400 . That url can be used in your Autoscan plex target. You should however give the Plex container a static IP if you don't wanna do this every 5 minutes.","title":"Using a secure Plex connection"},{"location":"containers/base/","text":"GitHub docker.io / ghcr.io 0 0 Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/base"},{"location":"containers/base/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/bazarr/","text":"GitHub docker.io / ghcr.io Bazarr 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name bazarr \\ -p 6767 :6767 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/bazarr version : \"3.7\" services : bazarr : container_name : bazarr image : cr.hotio.dev/hotio/bazarr ports : - \"6767:6767\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/bazarr"},{"location":"containers/bazarr/#starting-the-container","text":"cli compose docker run --rm \\ --name bazarr \\ -p 6767 :6767 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/bazarr version : \"3.7\" services : bazarr : container_name : bazarr image : cr.hotio.dev/hotio/bazarr ports : - \"6767:6767\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files.","title":"Starting the container"},{"location":"containers/bazarr/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/caddy/","text":"GitHub docker.io / ghcr.io Caddy 0 0 What is this? A docker image with Caddy 2 and fail2ban integrated. Starting the container \u00b6 cli compose docker run --rm \\ --name caddy \\ -p 80 :8080 \\ -p 443 :8443 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e CUSTOM_BUILD = \"\" \\ -v /<host_folder_config>:/config \\ --cap-add = NET_ADMIN \\ cr.hotio.dev/hotio/caddy version : \"3.7\" services : caddy : container_name : caddy image : cr.hotio.dev/hotio/caddy ports : - \"80:8080\" - \"443:8443\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - CUSTOM_BUILD volumes : - /<host_folder_config>:/config cap_add : - NET_ADMIN Custom build \u00b6 If you set the environment variable CUSTOM_BUILD to a file location like for example /config/caddy_linux_amd64_custom , an attempt is made to start Caddy with that binary. The custom build can be obtained from the Caddy download page. This is particularly useful if you need extra modules. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/caddy"},{"location":"containers/caddy/#starting-the-container","text":"cli compose docker run --rm \\ --name caddy \\ -p 80 :8080 \\ -p 443 :8443 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e CUSTOM_BUILD = \"\" \\ -v /<host_folder_config>:/config \\ --cap-add = NET_ADMIN \\ cr.hotio.dev/hotio/caddy version : \"3.7\" services : caddy : container_name : caddy image : cr.hotio.dev/hotio/caddy ports : - \"80:8080\" - \"443:8443\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - CUSTOM_BUILD volumes : - /<host_folder_config>:/config cap_add : - NET_ADMIN","title":"Starting the container"},{"location":"containers/caddy/#custom-build","text":"If you set the environment variable CUSTOM_BUILD to a file location like for example /config/caddy_linux_amd64_custom , an attempt is made to start Caddy with that binary. The custom build can be obtained from the Caddy download page. This is particularly useful if you need extra modules.","title":"Custom build"},{"location":"containers/caddy/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/cloudflareddns/","text":"GitHub docker.io / ghcr.io 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name cloudflareddns \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e INTERVAL = 300 \\ -e DETECTION_MODE = \"dig-whoami.cloudflare\" \\ -e LOG_LEVEL = 3 \\ -e CF_USER = \"your.cf.email@example.com\" \\ -e CF_APIKEY = \"your.global.apikey\" \\ -e CF_APITOKEN = \"\" \\ -e CF_APITOKEN_ZONE = \"\" \\ -e CF_HOSTS = \"test.example.com;test.foobar.com;test2.foobar.com\" \\ -e CF_ZONES = \"example.com;foobar.com;foobar.com\" \\ -e CF_RECORDTYPES = \"A;A;AAAA\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/cloudflareddns version : \"3.7\" services : cloudflareddns : container_name : cloudflareddns image : cr.hotio.dev/hotio/cloudflareddns environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - INTERVAL=300 - DETECTION_MODE=dig-whoami.cloudflare - LOG_LEVEL=3 - CF_USER=your.cf.email@example.com - CF_APIKEY=your.global.apikey - CF_APITOKEN - CF_APITOKEN_ZONE - CF_HOSTS=test.example.com;test.foobar.com;test2.foobar.com - CF_ZONES=example.com;foobar.com;foobar.com - CF_RECORDTYPES=A;A;AAAA volumes : - /<host_folder_config>:/config Possible values for DETECTION_MODE are dig-google.com , dig-opendns.com , dig-whoami.cloudflare , curl-icanhazip.com , curl-wtfismyip.com , curl-showmyip.ca , curl-da.gd , curl-seeip.org and curl-ifconfig.co . If you want to get the local ip from a network interface, use something like local:eth0 as DETECTION_MODE . Notice that we give 3 values each time for CF_HOSTS , CF_ZONES and CF_RECORDTYPES . In our example, the domain test.foobar.com belonging to the zone foobar.com will have its A record updated with an ipv4 ip. If you use CF_APITOKEN , you can leave CF_USER and CF_APIKEY empty. Important All the domain names in CF_HOSTS should have properly configured DNS records on Cloudflare, they will not be created. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit. Zone ID \u00b6 Instead of the zone_name , you can also fill in a zone_id in CF_ZONES . When using a zone_id , you can use a scoped token ( CF_APITOKEN ) that only needs the Zone - DNS - Edit permissions. This improves security. The configuration could look like the example below. -e CF_APITOKEN = \"azkqvJ86wEScojvSJC8DyY67TwqNwZCtomEVrHwt\" -e CF_HOSTS = \"example.com;test.foobar.com\" -e CF_ZONES = \"zbpsi9ceikrdnnym27s2xnp6s5dvj6ep;dccbe6grakumohwwd4amh4o46yupepn8\" -e CF_RECORDTYPES = \"A;A\" Seperate API Tokens \u00b6 If you do not prefer to use a zone_id , but prefer some more security, you can use 2 seperate tokens. CF_APITOKEN configured with: Permissions Zone - DNS - Edit Zone Resources Include - Specific zone - example.com Include - Specific zone - foobar.com CF_APITOKEN_ZONE configured with: Permissions Zone - Zone - Read Zone Resources Include - All zones Leaving CF_APITOKEN_ZONE blank would mean that only CF_APITOKEN will be used and thus that token should have all required permissions. Which usually means that the token could edit all zones or not be able to fetch the zone_id from the zone_name . Configuration combination examples \u00b6 Below are some example configuration combinations, ordered from most secure to least secure. We use a zone_id so that our token only needs the permissions Zone - DNS - Edit . -e CF_APITOKEN = \"azkqvJ86wEScojvSJC8DyY67TwqNwZCtomEVrHwt\" -e CF_HOSTS = \"vpn.example.com;test.foobar.com\" -e CF_ZONES = \"zbpsi9ceikrdnnym27s2xnp6s5dvj6ep;axozor886pyja7nmbcvu5kh7dp9557j4\" -e CF_RECORDTYPES = \"A;A\" We use additionally a CF_APITOKEN_ZONE with the permissions Zone - Zone - Read to query the zones and getting the zone_id . -e CF_APITOKEN = \"azkqvJ86wEScojvSJC8DyY67TwqNwZCtomEVrHwt\" -e CF_APITOKEN_ZONE = \"8m4TxzWb9QHXEpTwQDMugkKuHRavsxoK8qmJ4P7M\" -e CF_HOSTS = \"vpn.example.com;test.foobar.com\" -e CF_ZONES = \"example.com;axozor886pyja7nmbcvu5kh7dp9557j4\" -e CF_RECORDTYPES = \"A;A\" We use only CF_APITOKEN , but with the permissions Zone - DNS - Edit and Zone - Zone - Read . -e CF_APITOKEN = \"azkqvJ86wEScojvSJC8DyY67TwqNwZCtomEVrHwt\" -e CF_HOSTS = \"vpn.example.com;test.foobar.com\" -e CF_ZONES = \"example.com;axozor886pyja7nmbcvu5kh7dp9557j4\" -e CF_RECORDTYPES = \"A;A\" We use CF_USER and CF_APIKEY , basically giving full control over our account. -e CF_USER = \"your.cf.email@example.com\" -e CF_APIKEY = \"your.global.apikey\" -e CF_HOSTS = \"vpn.example.com;test.foobar.com\" -e CF_ZONES = \"example.com;axozor886pyja7nmbcvu5kh7dp9557j4\" -e CF_RECORDTYPES = \"A;A\" Example of the log output \u00b6 2020-05-17 17:20:54 - INFO - IPv4 detected by [dig-whoami.cloudflare] is [1.1.1.1]. 2020-05-17 17:20:54 - INFO - [1/1] [A] [vpn.example.com] Reading zone list from Cloudflare. 2020-05-17 17:20:54 - INFO - [1/1] [A] [vpn.example.com] Retrieved zone list from Cloudflare. 2020-05-17 17:20:54 - INFO - [1/1] [A] [vpn.example.com] Zone ID [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx] found for zone [example.com]. 2020-05-17 17:20:54 - INFO - [1/1] [A] [vpn.example.com] Reading DNS record from Cloudflare. 2020-05-17 17:20:55 - INFO - [1/1] [A] [vpn.example.com] Writing DNS record to cache file [/config/cf-ddns-A-vpn.example.com.cache]. 2020-05-17 17:20:55 - INFO - [1/1] [A] [vpn.example.com] Checking if update is needed. 2020-05-17 17:20:55 - INFO - [1/1] [A] [vpn.example.com] No update needed. 2020-05-17 17:20:55 - INFO - Going to sleep for [300] seconds... Log levels \u00b6 For LOG_LEVEL you can pick 0 , 1 , 2 or 3 . 0 will give no log output. It's not recommended to use. 1 will give you the following output types. It's the recommended value when all things are configured and running as expected. UPDATE, WARNING, ERROR 2 will give you the following output types. Use this if you always wanna see what's going on, but 3 gives you too much output. UPDATE, WARNING, ERROR, INFO 3 will give you the following output types. This is the default. UPDATE, WARNING, ERROR, INFO, DEBUG JSON log \u00b6 Every IP update is also logged to /config/cf-ddns-updates.json . This can be used with the Telegraf JSON parser and the tail input, to get your domain updates into InfluxDB. Example output below. { \"domain\" : \"vpn.example.com\" , \"recordtype\" : \"A\" , \"ip\" : \"1.1.1.1\" , \"timestamp\" : \"2020-05-17T20:27:14Z\" } { \"domain\" : \"vpn.example.com\" , \"recordtype\" : \"A\" , \"ip\" : \"1.1.1.1\" , \"timestamp\" : \"2020-05-17T20:29:26Z\" } Cached results from Cloudflare \u00b6 The returned results from Cloudflare are cached. This means minimal api calls to Cloudflare. If you have made any manual changes to the IP on the Cloudflare webinterface, for instance when wanting to test an update, a container restart is needed to clear the cache. The proxy setting (orange cloud) and TTL is also cached and re-set based on the previous value, so if you made any modifications to these settings, you should restart the container so that the script is aware of the new settings. Sending notifications \u00b6 You can send notifications when a DNS record gets updated with a new IP using Apprise . Use the environment variable APPRISE to configure notifications, see below for some examples. -e APPRISE = \"pover://user@token\" -e APPRISE = \"pover://user@token;discord://webhook_id/webhook_token\"","title":"hotio/cloudflareddns"},{"location":"containers/cloudflareddns/#starting-the-container","text":"cli compose docker run --rm \\ --name cloudflareddns \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e INTERVAL = 300 \\ -e DETECTION_MODE = \"dig-whoami.cloudflare\" \\ -e LOG_LEVEL = 3 \\ -e CF_USER = \"your.cf.email@example.com\" \\ -e CF_APIKEY = \"your.global.apikey\" \\ -e CF_APITOKEN = \"\" \\ -e CF_APITOKEN_ZONE = \"\" \\ -e CF_HOSTS = \"test.example.com;test.foobar.com;test2.foobar.com\" \\ -e CF_ZONES = \"example.com;foobar.com;foobar.com\" \\ -e CF_RECORDTYPES = \"A;A;AAAA\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/cloudflareddns version : \"3.7\" services : cloudflareddns : container_name : cloudflareddns image : cr.hotio.dev/hotio/cloudflareddns environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - INTERVAL=300 - DETECTION_MODE=dig-whoami.cloudflare - LOG_LEVEL=3 - CF_USER=your.cf.email@example.com - CF_APIKEY=your.global.apikey - CF_APITOKEN - CF_APITOKEN_ZONE - CF_HOSTS=test.example.com;test.foobar.com;test2.foobar.com - CF_ZONES=example.com;foobar.com;foobar.com - CF_RECORDTYPES=A;A;AAAA volumes : - /<host_folder_config>:/config Possible values for DETECTION_MODE are dig-google.com , dig-opendns.com , dig-whoami.cloudflare , curl-icanhazip.com , curl-wtfismyip.com , curl-showmyip.ca , curl-da.gd , curl-seeip.org and curl-ifconfig.co . If you want to get the local ip from a network interface, use something like local:eth0 as DETECTION_MODE . Notice that we give 3 values each time for CF_HOSTS , CF_ZONES and CF_RECORDTYPES . In our example, the domain test.foobar.com belonging to the zone foobar.com will have its A record updated with an ipv4 ip. If you use CF_APITOKEN , you can leave CF_USER and CF_APIKEY empty. Important All the domain names in CF_HOSTS should have properly configured DNS records on Cloudflare, they will not be created.","title":"Starting the container"},{"location":"containers/cloudflareddns/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/cloudflareddns/#zone-id","text":"Instead of the zone_name , you can also fill in a zone_id in CF_ZONES . When using a zone_id , you can use a scoped token ( CF_APITOKEN ) that only needs the Zone - DNS - Edit permissions. This improves security. The configuration could look like the example below. -e CF_APITOKEN = \"azkqvJ86wEScojvSJC8DyY67TwqNwZCtomEVrHwt\" -e CF_HOSTS = \"example.com;test.foobar.com\" -e CF_ZONES = \"zbpsi9ceikrdnnym27s2xnp6s5dvj6ep;dccbe6grakumohwwd4amh4o46yupepn8\" -e CF_RECORDTYPES = \"A;A\"","title":"Zone ID"},{"location":"containers/cloudflareddns/#seperate-api-tokens","text":"If you do not prefer to use a zone_id , but prefer some more security, you can use 2 seperate tokens. CF_APITOKEN configured with: Permissions Zone - DNS - Edit Zone Resources Include - Specific zone - example.com Include - Specific zone - foobar.com CF_APITOKEN_ZONE configured with: Permissions Zone - Zone - Read Zone Resources Include - All zones Leaving CF_APITOKEN_ZONE blank would mean that only CF_APITOKEN will be used and thus that token should have all required permissions. Which usually means that the token could edit all zones or not be able to fetch the zone_id from the zone_name .","title":"Seperate API Tokens"},{"location":"containers/cloudflareddns/#configuration-combination-examples","text":"Below are some example configuration combinations, ordered from most secure to least secure. We use a zone_id so that our token only needs the permissions Zone - DNS - Edit . -e CF_APITOKEN = \"azkqvJ86wEScojvSJC8DyY67TwqNwZCtomEVrHwt\" -e CF_HOSTS = \"vpn.example.com;test.foobar.com\" -e CF_ZONES = \"zbpsi9ceikrdnnym27s2xnp6s5dvj6ep;axozor886pyja7nmbcvu5kh7dp9557j4\" -e CF_RECORDTYPES = \"A;A\" We use additionally a CF_APITOKEN_ZONE with the permissions Zone - Zone - Read to query the zones and getting the zone_id . -e CF_APITOKEN = \"azkqvJ86wEScojvSJC8DyY67TwqNwZCtomEVrHwt\" -e CF_APITOKEN_ZONE = \"8m4TxzWb9QHXEpTwQDMugkKuHRavsxoK8qmJ4P7M\" -e CF_HOSTS = \"vpn.example.com;test.foobar.com\" -e CF_ZONES = \"example.com;axozor886pyja7nmbcvu5kh7dp9557j4\" -e CF_RECORDTYPES = \"A;A\" We use only CF_APITOKEN , but with the permissions Zone - DNS - Edit and Zone - Zone - Read . -e CF_APITOKEN = \"azkqvJ86wEScojvSJC8DyY67TwqNwZCtomEVrHwt\" -e CF_HOSTS = \"vpn.example.com;test.foobar.com\" -e CF_ZONES = \"example.com;axozor886pyja7nmbcvu5kh7dp9557j4\" -e CF_RECORDTYPES = \"A;A\" We use CF_USER and CF_APIKEY , basically giving full control over our account. -e CF_USER = \"your.cf.email@example.com\" -e CF_APIKEY = \"your.global.apikey\" -e CF_HOSTS = \"vpn.example.com;test.foobar.com\" -e CF_ZONES = \"example.com;axozor886pyja7nmbcvu5kh7dp9557j4\" -e CF_RECORDTYPES = \"A;A\"","title":"Configuration combination examples"},{"location":"containers/cloudflareddns/#example-of-the-log-output","text":"2020-05-17 17:20:54 - INFO - IPv4 detected by [dig-whoami.cloudflare] is [1.1.1.1]. 2020-05-17 17:20:54 - INFO - [1/1] [A] [vpn.example.com] Reading zone list from Cloudflare. 2020-05-17 17:20:54 - INFO - [1/1] [A] [vpn.example.com] Retrieved zone list from Cloudflare. 2020-05-17 17:20:54 - INFO - [1/1] [A] [vpn.example.com] Zone ID [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx] found for zone [example.com]. 2020-05-17 17:20:54 - INFO - [1/1] [A] [vpn.example.com] Reading DNS record from Cloudflare. 2020-05-17 17:20:55 - INFO - [1/1] [A] [vpn.example.com] Writing DNS record to cache file [/config/cf-ddns-A-vpn.example.com.cache]. 2020-05-17 17:20:55 - INFO - [1/1] [A] [vpn.example.com] Checking if update is needed. 2020-05-17 17:20:55 - INFO - [1/1] [A] [vpn.example.com] No update needed. 2020-05-17 17:20:55 - INFO - Going to sleep for [300] seconds...","title":"Example of the log output"},{"location":"containers/cloudflareddns/#log-levels","text":"For LOG_LEVEL you can pick 0 , 1 , 2 or 3 . 0 will give no log output. It's not recommended to use. 1 will give you the following output types. It's the recommended value when all things are configured and running as expected. UPDATE, WARNING, ERROR 2 will give you the following output types. Use this if you always wanna see what's going on, but 3 gives you too much output. UPDATE, WARNING, ERROR, INFO 3 will give you the following output types. This is the default. UPDATE, WARNING, ERROR, INFO, DEBUG","title":"Log levels"},{"location":"containers/cloudflareddns/#json-log","text":"Every IP update is also logged to /config/cf-ddns-updates.json . This can be used with the Telegraf JSON parser and the tail input, to get your domain updates into InfluxDB. Example output below. { \"domain\" : \"vpn.example.com\" , \"recordtype\" : \"A\" , \"ip\" : \"1.1.1.1\" , \"timestamp\" : \"2020-05-17T20:27:14Z\" } { \"domain\" : \"vpn.example.com\" , \"recordtype\" : \"A\" , \"ip\" : \"1.1.1.1\" , \"timestamp\" : \"2020-05-17T20:29:26Z\" }","title":"JSON log"},{"location":"containers/cloudflareddns/#cached-results-from-cloudflare","text":"The returned results from Cloudflare are cached. This means minimal api calls to Cloudflare. If you have made any manual changes to the IP on the Cloudflare webinterface, for instance when wanting to test an update, a container restart is needed to clear the cache. The proxy setting (orange cloud) and TTL is also cached and re-set based on the previous value, so if you made any modifications to these settings, you should restart the container so that the script is aware of the new settings.","title":"Cached results from Cloudflare"},{"location":"containers/cloudflareddns/#sending-notifications","text":"You can send notifications when a DNS record gets updated with a new IP using Apprise . Use the environment variable APPRISE to configure notifications, see below for some examples. -e APPRISE = \"pover://user@token\" -e APPRISE = \"pover://user@token;discord://webhook_id/webhook_token\"","title":"Sending notifications"},{"location":"containers/doplarr/","text":"GitHub docker.io / ghcr.io Doplarr 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name doplarr \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/doplarr version : \"3.7\" services : doplarr : container_name : doplarr image : cr.hotio.dev/hotio/doplarr environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/doplarr"},{"location":"containers/doplarr/#starting-the-container","text":"cli compose docker run --rm \\ --name doplarr \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/doplarr version : \"3.7\" services : doplarr : container_name : doplarr image : cr.hotio.dev/hotio/doplarr environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config","title":"Starting the container"},{"location":"containers/doplarr/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/duplicacy/","text":"GitHub docker.io / ghcr.io Duplicacy 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name duplicacy \\ --hostname duplicacy \\ -p 3875 :3875 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ -v /<host_folder_cache>:/cache \\ -v /<host_folder_logs>:/logs \\ cr.hotio.dev/hotio/duplicacy version : \"3.7\" services : duplicacy : container_name : duplicacy hostname : duplicacy image : cr.hotio.dev/hotio/duplicacy ports : - \"3875:3875\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config - /<host_folder_cache>:/cache - /<host_folder_logs>:/logs In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. If you don't want to enter your password every time you restart the container, you can set the environment variable DWE_PASSWORD with your password or starting with version 1.4.1 a file /config/keyring will be created that stores your password encryted if you click the checkmark on the login page. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/duplicacy"},{"location":"containers/duplicacy/#starting-the-container","text":"cli compose docker run --rm \\ --name duplicacy \\ --hostname duplicacy \\ -p 3875 :3875 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ -v /<host_folder_cache>:/cache \\ -v /<host_folder_logs>:/logs \\ cr.hotio.dev/hotio/duplicacy version : \"3.7\" services : duplicacy : container_name : duplicacy hostname : duplicacy image : cr.hotio.dev/hotio/duplicacy ports : - \"3875:3875\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config - /<host_folder_cache>:/cache - /<host_folder_logs>:/logs In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. If you don't want to enter your password every time you restart the container, you can set the environment variable DWE_PASSWORD with your password or starting with version 1.4.1 a file /config/keyring will be created that stores your password encryted if you click the checkmark on the login page.","title":"Starting the container"},{"location":"containers/duplicacy/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/jackett/","text":"GitHub docker.io / ghcr.io Jackett 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name jackett \\ -p 9117 :9117 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/jackett version : \"3.7\" services : jackett : container_name : jackett image : cr.hotio.dev/hotio/jackett ports : - \"9117:9117\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/jackett"},{"location":"containers/jackett/#starting-the-container","text":"cli compose docker run --rm \\ --name jackett \\ -p 9117 :9117 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/jackett version : \"3.7\" services : jackett : container_name : jackett image : cr.hotio.dev/hotio/jackett ports : - \"9117:9117\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config","title":"Starting the container"},{"location":"containers/jackett/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/jellyfin/","text":"GitHub docker.io / ghcr.io Jellyfin 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name jellyfin \\ -p 8096 :8096 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/jellyfin version : \"3.7\" services : jellyfin : container_name : jellyfin image : cr.hotio.dev/hotio/jellyfin ports : - \"8096:8096\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit. Configuration \u00b6 The following jellyfin path locations are used by default. JELLYFIN_CONFIG_DIR = \"/config\" JELLYFIN_DATA_DIR = \"/config/data\" JELLYFIN_LOG_DIR = \"/config/log\" JELLYFIN_CACHE_DIR = \"/config/cache\" You can override these locations by setting them to a different value with a docker environment variable. Hardware support \u00b6 To make your hardware devices available inside the container use the following argument --device=/dev/dri:/dev/dri for Intel QuickSync and --device=/dev/dvb:/dev/dvb for a tuner. NVIDIA users should go visit the NVIDIA github page for instructions. For Raspberry Pi OpenMAX you'll need to use --device=/dev/vchiq:/dev/vchiq -v /opt/vc/lib:/opt/vc/lib , V4L2 will need --device=/dev/video10:/dev/video10 --device=/dev/video11:/dev/video11 --device=/dev/video12:/dev/video12 and MMAL needs --device=/dev/vcsm:/dev/vcsm or --device=/dev/vc-mem:/dev/vc-mem .","title":"hotio/jellyfin"},{"location":"containers/jellyfin/#starting-the-container","text":"cli compose docker run --rm \\ --name jellyfin \\ -p 8096 :8096 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/jellyfin version : \"3.7\" services : jellyfin : container_name : jellyfin image : cr.hotio.dev/hotio/jellyfin ports : - \"8096:8096\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files.","title":"Starting the container"},{"location":"containers/jellyfin/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/jellyfin/#configuration","text":"The following jellyfin path locations are used by default. JELLYFIN_CONFIG_DIR = \"/config\" JELLYFIN_DATA_DIR = \"/config/data\" JELLYFIN_LOG_DIR = \"/config/log\" JELLYFIN_CACHE_DIR = \"/config/cache\" You can override these locations by setting them to a different value with a docker environment variable.","title":"Configuration"},{"location":"containers/jellyfin/#hardware-support","text":"To make your hardware devices available inside the container use the following argument --device=/dev/dri:/dev/dri for Intel QuickSync and --device=/dev/dvb:/dev/dvb for a tuner. NVIDIA users should go visit the NVIDIA github page for instructions. For Raspberry Pi OpenMAX you'll need to use --device=/dev/vchiq:/dev/vchiq -v /opt/vc/lib:/opt/vc/lib , V4L2 will need --device=/dev/video10:/dev/video10 --device=/dev/video11:/dev/video11 --device=/dev/video12:/dev/video12 and MMAL needs --device=/dev/vcsm:/dev/vcsm or --device=/dev/vc-mem:/dev/vc-mem .","title":"Hardware support"},{"location":"containers/lidarr/","text":"GitHub docker.io / ghcr.io Lidarr 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name lidarr \\ -p 8686 :8686 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/lidarr version : \"3.7\" services : lidarr : container_name : lidarr image : cr.hotio.dev/hotio/lidarr ports : - \"8686:8686\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/lidarr"},{"location":"containers/lidarr/#starting-the-container","text":"cli compose docker run --rm \\ --name lidarr \\ -p 8686 :8686 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/lidarr version : \"3.7\" services : lidarr : container_name : lidarr image : cr.hotio.dev/hotio/lidarr ports : - \"8686:8686\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files.","title":"Starting the container"},{"location":"containers/lidarr/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/mergerfs/","text":"GitHub docker.io / ghcr.io MergerFS 0 0 Starting the container \u00b6 cli docker run --rm \\ --init \\ -v /<host_folder_branch_1>:/branch_1 \\ -v /<host_folder_branch_2>:/branch_2 \\ -v /<host_folder_mountpoint>:/mountpoint:shared \\ --cap-add SYS_ADMIN \\ --device /dev/fuse \\ cr.hotio.dev/hotio/mergerfs -o allow_other /branch_1 /branch_2 /mountpoint The default ENTRYPOINT is mergerfs -f . Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit. Using the mergerfs mount on the host \u00b6 By setting the bind-propagation to shared on the volume mountpoint , like this -v /data/mountpoint:/mountpoint:shared , you are able to access the mount from the host. If you want to use this mount in another container, the best solution is to create a volume on the parent folder of that mount with bind-propagation set to slave . For example, -v /data:/data:slave ( /data on the host, would contain the previously created volume mountpoint ). Doing it like this will ensure that when the container creating the mount restarts, the other containers using that mount will recover and keep working. Extra docker privileges \u00b6 On some systems you'll also need the following privileges. --security-opt apparmor:unconfined","title":"hotio/mergerfs"},{"location":"containers/mergerfs/#starting-the-container","text":"cli docker run --rm \\ --init \\ -v /<host_folder_branch_1>:/branch_1 \\ -v /<host_folder_branch_2>:/branch_2 \\ -v /<host_folder_mountpoint>:/mountpoint:shared \\ --cap-add SYS_ADMIN \\ --device /dev/fuse \\ cr.hotio.dev/hotio/mergerfs -o allow_other /branch_1 /branch_2 /mountpoint The default ENTRYPOINT is mergerfs -f .","title":"Starting the container"},{"location":"containers/mergerfs/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/mergerfs/#using-the-mergerfs-mount-on-the-host","text":"By setting the bind-propagation to shared on the volume mountpoint , like this -v /data/mountpoint:/mountpoint:shared , you are able to access the mount from the host. If you want to use this mount in another container, the best solution is to create a volume on the parent folder of that mount with bind-propagation set to slave . For example, -v /data:/data:slave ( /data on the host, would contain the previously created volume mountpoint ). Doing it like this will ensure that when the container creating the mount restarts, the other containers using that mount will recover and keep working.","title":"Using the mergerfs mount on the host"},{"location":"containers/mergerfs/#extra-docker-privileges","text":"On some systems you'll also need the following privileges. --security-opt apparmor:unconfined","title":"Extra docker privileges"},{"location":"containers/nzbget/","text":"GitHub docker.io / ghcr.io NZBGet 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name nzbget \\ -p 6789 :6789 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/nzbget version : \"3.7\" services : nzbget : container_name : nzbget image : cr.hotio.dev/hotio/nzbget ports : - \"6789:6789\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/nzbget"},{"location":"containers/nzbget/#starting-the-container","text":"cli compose docker run --rm \\ --name nzbget \\ -p 6789 :6789 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/nzbget version : \"3.7\" services : nzbget : container_name : nzbget image : cr.hotio.dev/hotio/nzbget ports : - \"6789:6789\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files.","title":"Starting the container"},{"location":"containers/nzbget/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/nzbhydra2/","text":"GitHub docker.io / ghcr.io NZBHydra2 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name nzbhydra2 \\ -p 5076 :5076 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/nzbhydra2 version : \"3.7\" services : nzbhydra2 : container_name : nzbhydra2 image : cr.hotio.dev/hotio/nzbhydra2 ports : - \"5076:5076\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/nzbhydra2"},{"location":"containers/nzbhydra2/#starting-the-container","text":"cli compose docker run --rm \\ --name nzbhydra2 \\ -p 5076 :5076 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/nzbhydra2 version : \"3.7\" services : nzbhydra2 : container_name : nzbhydra2 image : cr.hotio.dev/hotio/nzbhydra2 ports : - \"5076:5076\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config","title":"Starting the container"},{"location":"containers/nzbhydra2/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/overseerr/","text":"GitHub docker.io / ghcr.io Overseerr 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name overseerr \\ -p 5055 :5055 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/overseerr version : \"3.7\" services : overseerr : container_name : overseerr image : cr.hotio.dev/hotio/overseerr ports : - \"5055:5055\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit. Using a secure Plex connection \u00b6 If you want to keep using secure connections within Plex, but don't want to buy your own domain and keep the connection between Overseerr and Plex inside of their Docker network. Follow the below procedure. We'll use Google Chrome in this example. Visit https://app.plex.tv and make sure you are logged in. Open Chrome DevTools (usually F12) and open the Console tab, then refresh your browser window. One of the very first lines you will see is [Servers] Initialize server with token, ... , in that message you should see some url that looks like https://10-1-0-100.xxxxxxxxxxxxx.plex.direct:32400 . Part of that url can be used in your Overseerr settings, the part 10-1-0-100.xxxxxxxxxxxxx.plex.direct is what you'll need to copy/paste, the port is in a seperate input box and enable SSL. You should however give the Plex container a static IP if you don't wanna do this every 5 minutes.","title":"hotio/overseerr"},{"location":"containers/overseerr/#starting-the-container","text":"cli compose docker run --rm \\ --name overseerr \\ -p 5055 :5055 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/overseerr version : \"3.7\" services : overseerr : container_name : overseerr image : cr.hotio.dev/hotio/overseerr ports : - \"5055:5055\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config","title":"Starting the container"},{"location":"containers/overseerr/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/overseerr/#using-a-secure-plex-connection","text":"If you want to keep using secure connections within Plex, but don't want to buy your own domain and keep the connection between Overseerr and Plex inside of their Docker network. Follow the below procedure. We'll use Google Chrome in this example. Visit https://app.plex.tv and make sure you are logged in. Open Chrome DevTools (usually F12) and open the Console tab, then refresh your browser window. One of the very first lines you will see is [Servers] Initialize server with token, ... , in that message you should see some url that looks like https://10-1-0-100.xxxxxxxxxxxxx.plex.direct:32400 . Part of that url can be used in your Overseerr settings, the part 10-1-0-100.xxxxxxxxxxxxx.plex.direct is what you'll need to copy/paste, the port is in a seperate input box and enable SSL. You should however give the Plex container a static IP if you don't wanna do this every 5 minutes.","title":"Using a secure Plex connection"},{"location":"containers/plex/","text":"GitHub docker.io / ghcr.io Plex 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name plex \\ -p 32400 :32400 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e PLEX_CLAIM = \"\" \\ -e ADVERTISE_IP = \"\" \\ -e ALLOWED_NETWORKS = \"\" \\ -e PLEX_PASS = \"no\" \\ -v /<host_folder_config>:/config \\ -v /<host_folder_transcode>:/transcode \\ cr.hotio.dev/hotio/plex version : \"3.7\" services : plex : container_name : plex image : cr.hotio.dev/hotio/plex ports : - \"32400:32400\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - PLEX_CLAIM - ADVERTISE_IP - ALLOWED_NETWORKS - PLEX_PASS=no volumes : - /<host_folder_config>:/config - /<host_folder_transcode>:/transcode In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit. Volumes \u00b6 By default the container has 2 volumes defined, the volume /config that contains the configuration files and the volume /transcode which is used as the default transcode directory. Claim your server \u00b6 Go to plex.tv/claim and login with your account, copy the claim code and add it to the environment variable like this -e PLEX_CLAIM=\"claim-xxxxxxxxxxxxxxxxxxxx\" . When starting the new plex server for the first time, the server will be added to your account. Plex Pass \u00b6 If you are a Plex Pass subscriber, you can enable the install of beta builds with -e PLEX_PASS=\"yes\" . When the container starts, a version check is done for the latest beta and installed if a newer version is found. Environment variables ADVERTISE_IP and ALLOWED_NETWORKS \u00b6 The variables correspond to the below plex network settings. The variable ADVERTISE_IP is useful to aid your local clients in discovering your plex server when running in the bridge network mode. Most likely you would use something like http://192.168.0.10:32400 . You could use ALLOWED_NETWORKS when you're locked out and need to regain access without providing credentials. TOP secret stuff \u00b6 If you do -e PLEX_PASS=\"https://...\" , stuff happens for which no support will be given. Hardware support \u00b6 To make your hardware devices available inside the container use the following argument --device=/dev/dri:/dev/dri for Intel QuickSync and --device=/dev/dvb:/dev/dvb for a tuner. NVIDIA users should go visit the NVIDIA github page for instructions.","title":"hotio/plex"},{"location":"containers/plex/#starting-the-container","text":"cli compose docker run --rm \\ --name plex \\ -p 32400 :32400 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e PLEX_CLAIM = \"\" \\ -e ADVERTISE_IP = \"\" \\ -e ALLOWED_NETWORKS = \"\" \\ -e PLEX_PASS = \"no\" \\ -v /<host_folder_config>:/config \\ -v /<host_folder_transcode>:/transcode \\ cr.hotio.dev/hotio/plex version : \"3.7\" services : plex : container_name : plex image : cr.hotio.dev/hotio/plex ports : - \"32400:32400\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - PLEX_CLAIM - ADVERTISE_IP - ALLOWED_NETWORKS - PLEX_PASS=no volumes : - /<host_folder_config>:/config - /<host_folder_transcode>:/transcode In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files.","title":"Starting the container"},{"location":"containers/plex/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/plex/#volumes","text":"By default the container has 2 volumes defined, the volume /config that contains the configuration files and the volume /transcode which is used as the default transcode directory.","title":"Volumes"},{"location":"containers/plex/#claim-your-server","text":"Go to plex.tv/claim and login with your account, copy the claim code and add it to the environment variable like this -e PLEX_CLAIM=\"claim-xxxxxxxxxxxxxxxxxxxx\" . When starting the new plex server for the first time, the server will be added to your account.","title":"Claim your server"},{"location":"containers/plex/#plex-pass","text":"If you are a Plex Pass subscriber, you can enable the install of beta builds with -e PLEX_PASS=\"yes\" . When the container starts, a version check is done for the latest beta and installed if a newer version is found.","title":"Plex Pass"},{"location":"containers/plex/#environment-variables-advertise_ip-and-allowed_networks","text":"The variables correspond to the below plex network settings. The variable ADVERTISE_IP is useful to aid your local clients in discovering your plex server when running in the bridge network mode. Most likely you would use something like http://192.168.0.10:32400 . You could use ALLOWED_NETWORKS when you're locked out and need to regain access without providing credentials.","title":"Environment variables ADVERTISE_IP and ALLOWED_NETWORKS"},{"location":"containers/plex/#top-secret-stuff","text":"If you do -e PLEX_PASS=\"https://...\" , stuff happens for which no support will be given.","title":"TOP secret stuff"},{"location":"containers/plex/#hardware-support","text":"To make your hardware devices available inside the container use the following argument --device=/dev/dri:/dev/dri for Intel QuickSync and --device=/dev/dvb:/dev/dvb for a tuner. NVIDIA users should go visit the NVIDIA github page for instructions.","title":"Hardware support"},{"location":"containers/prowlarr/","text":"GitHub docker.io / ghcr.io Prowlarr 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name prowlarr \\ -p 9696 :9696 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/prowlarr version : \"3.7\" services : prowlarr : container_name : prowlarr image : cr.hotio.dev/hotio/prowlarr ports : - \"9696:9696\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/prowlarr"},{"location":"containers/prowlarr/#starting-the-container","text":"cli compose docker run --rm \\ --name prowlarr \\ -p 9696 :9696 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/prowlarr version : \"3.7\" services : prowlarr : container_name : prowlarr image : cr.hotio.dev/hotio/prowlarr ports : - \"9696:9696\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config","title":"Starting the container"},{"location":"containers/prowlarr/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/qbitmanage/","text":"GitHub docker.io / ghcr.io qbit_manage 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name qbitmanage \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/qbitmanage version : \"3.7\" services : qbitmanage : container_name : qbitmanage image : cr.hotio.dev/hotio/qbitmanage environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - ARGS volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/qbitmanage"},{"location":"containers/qbitmanage/#starting-the-container","text":"cli compose docker run --rm \\ --name qbitmanage \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e ARGS = \"\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/qbitmanage version : \"3.7\" services : qbitmanage : container_name : qbitmanage image : cr.hotio.dev/hotio/qbitmanage environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - ARGS volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files.","title":"Starting the container"},{"location":"containers/qbitmanage/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/qbittorrent/","text":"GitHub docker.io / ghcr.io qBittorrent / VueTorrent 0 0 Starting the container \u00b6 cli compose cli vpn compose vpn docker run --rm \\ --name qbittorrent \\ -p 8080 :8080 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/qbittorrent version : \"3.7\" services : qbittorrent : container_name : qbittorrent image : cr.hotio.dev/hotio/qbittorrent ports : - \"8080:8080\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config docker run --rm \\ --name qbittorrent \\ -p 8080 :8080 \\ -p 8118 :8118 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e VPN_ENABLED = \"true\" \\ -e VPN_LAN_NETWORK = \"\" \\ -e VPN_CONF = \"wg0\" \\ -e VPN_ADDITIONAL_PORTS = \"\" \\ -e PRIVOXY_ENABLED = \"false\" \\ -v /<host_folder_config>:/config \\ --cap-add = NET_ADMIN \\ --sysctl = \"net.ipv4.conf.all.src_valid_mark=1\" \\ --sysctl = \"net.ipv6.conf.all.disable_ipv6=0\" \\ cr.hotio.dev/hotio/qbittorrent version : \"3.7\" services : qbittorrent : container_name : qbittorrent image : cr.hotio.dev/hotio/qbittorrent ports : - \"8080:8080\" - \"8118:8118\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - VPN_ENABLED=true - VPN_LAN_NETWORK - VPN_CONF=wg0 - VPN_ADDITIONAL_PORTS - PRIVOXY_ENABLED=false volumes : - /<host_folder_config>:/config cap_add : - NET_ADMIN sysctls : - net.ipv4.conf.all.src_valid_mark=1 - net.ipv6.conf.all.disable_ipv6=0 In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Login credentials The default qBittorrent username is admin and the default password is adminadmin . If this doesn't work you're probably running Unraid and you'll most likely have to change the internal port on which the WebUI runs to match the external port. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit. Changing the WebUI port \u00b6 Under certain circumstances it's required to run the WebUI on a different internal port, you can do that by modifying the environment variable WEBUI_PORTS accordingly. It should be in the format xxxx/tcp,xxxx/udp , take a look at the default with docker logs (variable is printed at container start) or docker inspect . VueTorrent \u00b6 This image comes bundled with the alternative Web UI VueTorrent, to enable it you'll have to adjust your settings like pictured below. WireGuard VPN support \u00b6 There needs to be a file wg0.conf located in /config/wireguard and you need to set the variable VPN_ENABLED to true for the VPN to start. The part with net.ipv6.conf.all.disable_ipv6=0 is optional or you can set it to 1 if there is no need for ipv6 and you want to disable ipv6, no attempt will be made in that case to set ip6tables rules and can prevent an error if the module ip6table_filter isn't loaded on the host. The WireGuard configuration should not have any ipv6 related stuff when ipv6 is disabled, otherwise creating the interface will fail. If your vpn provider supports ipv6 and you keep it enabled, you'll have full ipv6 connectivity over the vpn connection (confirmed with Mullvad). If for any reason there's a failure trying to setup ip6tables rules, you'll probably need to do sudo modprobe ip6table_filter on the host, this will mostly happen on systems that have ipv6 completely disabled. The environment variable VPN_LAN_NETWORK can be set to for example 192.168.1.0/24 , 192.168.1.0/24,192.168.44.0/24 or 192.168.1.33 , so you can get access to the webui or other additional ports (see below). If you need to expose additional ports you can use VPN_ADDITIONAL_PORTS , for example VPN_ADDITIONAL_PORTS=7878/tcp,9117/tcp . Every port in this list will be blocked on the vpn interface, so that there's no risk that they might be exposed to the world via the vpn (mostly there in case your vpn provider screws up and piece of mind). Why would you need this? Wanting to route traffic from other containers over the vpn is probably the most used scenario. wg0.conf example \u00b6 This is an example of how your wg0.conf should look like. In case you have no need for ipv6 connectivity, make sure that you've got it disabled with net.ipv6.conf.all.disable_ipv6=1 and your wg0.conf does not contain any ipv6 stuff. Also make sure you remove any PreUp, PostUp, PreDown, PostDown stuff that your provider might have added (unless you know what it does). When using Mullvad, this means that you shouldn't enable the Kill Switch option. [Interface] PrivateKey = supersecretprivatekey Address = xx.xx.xxx.xxx/32 DNS = 1.1.1.1 [Peer] PublicKey = publickey AllowedIPs = 0.0.0.0/0 Endpoint = xxx.x.xxx.x:51820 resolv.conf error message If you are seeing an error message like mv: cannot move '/etc/resolv.conf.173.openresolv' to '/etc/resolv.conf': Resource busy . Remove the DNS = 1.1.1.1 from your wg0.conf file and set the dns server using the docker cli argument --dns 1.1.1.1 or the equivalent for compose. WireGuard Go \u00b6 This image includes wireguard-go , the Go implementation of WireGuard which runs in userspace. Systems like Synology, Qnap or others with missing kernel modules can make use of this to establish a WireGuard VPN connection. It requires the following two changes. A change to your wg0.conf , due to a long lasting bug in WireGuard on these systems. You'll need to change the AllowedIPs line to have WireGuard start up properly. Also an extra PostUp might have to be added, play with them to see what works best for your particular system. [Interface] ... PostUp = wg set wg0 fwmark 51820 && ip -4 rule add not fwmark 51820 table 51820 && ip -4 rule add table main suppress_prefixlength 0 && iptables-restore -n ... ... [Peer] ... AllowedIPs = 0.0.0.0/1,128.0.0.0/1 ... Next, you'll also need to add a device mapping. cli compose --device /dev/net/tun:/dev/net/tun devices : - /dev/net/tun:/dev/net/tun","title":"hotio/qbittorrent"},{"location":"containers/qbittorrent/#starting-the-container","text":"cli compose cli vpn compose vpn docker run --rm \\ --name qbittorrent \\ -p 8080 :8080 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/qbittorrent version : \"3.7\" services : qbittorrent : container_name : qbittorrent image : cr.hotio.dev/hotio/qbittorrent ports : - \"8080:8080\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config docker run --rm \\ --name qbittorrent \\ -p 8080 :8080 \\ -p 8118 :8118 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e VPN_ENABLED = \"true\" \\ -e VPN_LAN_NETWORK = \"\" \\ -e VPN_CONF = \"wg0\" \\ -e VPN_ADDITIONAL_PORTS = \"\" \\ -e PRIVOXY_ENABLED = \"false\" \\ -v /<host_folder_config>:/config \\ --cap-add = NET_ADMIN \\ --sysctl = \"net.ipv4.conf.all.src_valid_mark=1\" \\ --sysctl = \"net.ipv6.conf.all.disable_ipv6=0\" \\ cr.hotio.dev/hotio/qbittorrent version : \"3.7\" services : qbittorrent : container_name : qbittorrent image : cr.hotio.dev/hotio/qbittorrent ports : - \"8080:8080\" - \"8118:8118\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - VPN_ENABLED=true - VPN_LAN_NETWORK - VPN_CONF=wg0 - VPN_ADDITIONAL_PORTS - PRIVOXY_ENABLED=false volumes : - /<host_folder_config>:/config cap_add : - NET_ADMIN sysctls : - net.ipv4.conf.all.src_valid_mark=1 - net.ipv6.conf.all.disable_ipv6=0 In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Login credentials The default qBittorrent username is admin and the default password is adminadmin . If this doesn't work you're probably running Unraid and you'll most likely have to change the internal port on which the WebUI runs to match the external port.","title":"Starting the container"},{"location":"containers/qbittorrent/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/qbittorrent/#changing-the-webui-port","text":"Under certain circumstances it's required to run the WebUI on a different internal port, you can do that by modifying the environment variable WEBUI_PORTS accordingly. It should be in the format xxxx/tcp,xxxx/udp , take a look at the default with docker logs (variable is printed at container start) or docker inspect .","title":"Changing the WebUI port"},{"location":"containers/qbittorrent/#vuetorrent","text":"This image comes bundled with the alternative Web UI VueTorrent, to enable it you'll have to adjust your settings like pictured below.","title":"VueTorrent"},{"location":"containers/qbittorrent/#wireguard-vpn-support","text":"There needs to be a file wg0.conf located in /config/wireguard and you need to set the variable VPN_ENABLED to true for the VPN to start. The part with net.ipv6.conf.all.disable_ipv6=0 is optional or you can set it to 1 if there is no need for ipv6 and you want to disable ipv6, no attempt will be made in that case to set ip6tables rules and can prevent an error if the module ip6table_filter isn't loaded on the host. The WireGuard configuration should not have any ipv6 related stuff when ipv6 is disabled, otherwise creating the interface will fail. If your vpn provider supports ipv6 and you keep it enabled, you'll have full ipv6 connectivity over the vpn connection (confirmed with Mullvad). If for any reason there's a failure trying to setup ip6tables rules, you'll probably need to do sudo modprobe ip6table_filter on the host, this will mostly happen on systems that have ipv6 completely disabled. The environment variable VPN_LAN_NETWORK can be set to for example 192.168.1.0/24 , 192.168.1.0/24,192.168.44.0/24 or 192.168.1.33 , so you can get access to the webui or other additional ports (see below). If you need to expose additional ports you can use VPN_ADDITIONAL_PORTS , for example VPN_ADDITIONAL_PORTS=7878/tcp,9117/tcp . Every port in this list will be blocked on the vpn interface, so that there's no risk that they might be exposed to the world via the vpn (mostly there in case your vpn provider screws up and piece of mind). Why would you need this? Wanting to route traffic from other containers over the vpn is probably the most used scenario.","title":"WireGuard VPN support"},{"location":"containers/qbittorrent/#wg0conf-example","text":"This is an example of how your wg0.conf should look like. In case you have no need for ipv6 connectivity, make sure that you've got it disabled with net.ipv6.conf.all.disable_ipv6=1 and your wg0.conf does not contain any ipv6 stuff. Also make sure you remove any PreUp, PostUp, PreDown, PostDown stuff that your provider might have added (unless you know what it does). When using Mullvad, this means that you shouldn't enable the Kill Switch option. [Interface] PrivateKey = supersecretprivatekey Address = xx.xx.xxx.xxx/32 DNS = 1.1.1.1 [Peer] PublicKey = publickey AllowedIPs = 0.0.0.0/0 Endpoint = xxx.x.xxx.x:51820 resolv.conf error message If you are seeing an error message like mv: cannot move '/etc/resolv.conf.173.openresolv' to '/etc/resolv.conf': Resource busy . Remove the DNS = 1.1.1.1 from your wg0.conf file and set the dns server using the docker cli argument --dns 1.1.1.1 or the equivalent for compose.","title":"wg0.conf example"},{"location":"containers/qbittorrent/#wireguard-go","text":"This image includes wireguard-go , the Go implementation of WireGuard which runs in userspace. Systems like Synology, Qnap or others with missing kernel modules can make use of this to establish a WireGuard VPN connection. It requires the following two changes. A change to your wg0.conf , due to a long lasting bug in WireGuard on these systems. You'll need to change the AllowedIPs line to have WireGuard start up properly. Also an extra PostUp might have to be added, play with them to see what works best for your particular system. [Interface] ... PostUp = wg set wg0 fwmark 51820 && ip -4 rule add not fwmark 51820 table 51820 && ip -4 rule add table main suppress_prefixlength 0 && iptables-restore -n ... ... [Peer] ... AllowedIPs = 0.0.0.0/1,128.0.0.0/1 ... Next, you'll also need to add a device mapping. cli compose --device /dev/net/tun:/dev/net/tun devices : - /dev/net/tun:/dev/net/tun","title":"WireGuard Go"},{"location":"containers/qflood/","text":"GitHub docker.io / ghcr.io qBittorrent / Flood 0 0 What is this? A docker image with qBittorrent and the Flood UI, also optional WireGuard VPN support. Warning A recent qBittorrent update (v4.4.4) has broken the Flood UI, you'll see a message that no connection could be established. Starting the container \u00b6 cli compose cli vpn compose vpn docker run --rm \\ --name qflood \\ -p 8080 :8080 \\ -p 3000 :3000 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e FLOOD_AUTH = \"false\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/qflood version : \"3.7\" services : qflood : container_name : qflood image : cr.hotio.dev/hotio/qflood ports : - \"8080:8080\" - \"3000:3000\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - FLOOD_AUTH=false volumes : - /<host_folder_config>:/config docker run --rm \\ --name qflood \\ -p 8080 :8080 \\ -p 3000 :3000 \\ -p 8118 :8118 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e VPN_ENABLED = \"true\" \\ -e VPN_LAN_NETWORK = \"\" \\ -e VPN_CONF = \"wg0\" \\ -e VPN_ADDITIONAL_PORTS = \"\" \\ -e PRIVOXY_ENABLED = \"false\" \\ -e FLOOD_AUTH = \"false\" \\ -v /<host_folder_config>:/config \\ --cap-add = NET_ADMIN \\ --sysctl = \"net.ipv4.conf.all.src_valid_mark=1\" \\ --sysctl = \"net.ipv6.conf.all.disable_ipv6=0\" \\ cr.hotio.dev/hotio/qflood version : \"3.7\" services : qflood : container_name : qflood image : cr.hotio.dev/hotio/qflood ports : - \"8080:8080\" - \"3000:3000\" - \"8118:8118\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - VPN_ENABLED=true - VPN_LAN_NETWORK - VPN_CONF=wg0 - VPN_ADDITIONAL_PORTS - PRIVOXY_ENABLED=false - FLOOD_AUTH=false volumes : - /<host_folder_config>:/config cap_add : - NET_ADMIN sysctls : - net.ipv4.conf.all.src_valid_mark=1 - net.ipv6.conf.all.disable_ipv6=0 In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Login credentials The default qBittorrent username is admin and the default password is adminadmin . If this doesn't work you're probably running Unraid and you'll most likely have to change the internal port on which the WebUI runs to match the external port. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit. Changing the WebUI port \u00b6 Under certain circumstances it's required to run the WebUI on a different internal port, you can do that by modifying the environment variable WEBUI_PORTS accordingly. It should be in the format xxxx/tcp,xxxx/udp , take a look at the default with docker logs (variable is printed at container start) or docker inspect . WireGuard VPN support \u00b6 There needs to be a file wg0.conf located in /config/wireguard and you need to set the variable VPN_ENABLED to true for the VPN to start. The part with net.ipv6.conf.all.disable_ipv6=0 is optional or you can set it to 1 if there is no need for ipv6 and you want to disable ipv6, no attempt will be made in that case to set ip6tables rules and can prevent an error if the module ip6table_filter isn't loaded on the host. The WireGuard configuration should not have any ipv6 related stuff when ipv6 is disabled, otherwise creating the interface will fail. If your vpn provider supports ipv6 and you keep it enabled, you'll have full ipv6 connectivity over the vpn connection (confirmed with Mullvad). If for any reason there's a failure trying to setup ip6tables rules, you'll probably need to do sudo modprobe ip6table_filter on the host, this will mostly happen on systems that have ipv6 completely disabled. The environment variable VPN_LAN_NETWORK can be set to for example 192.168.1.0/24 , 192.168.1.0/24,192.168.44.0/24 or 192.168.1.33 , so you can get access to the webui or other additional ports (see below). If you need to expose additional ports you can use VPN_ADDITIONAL_PORTS , for example VPN_ADDITIONAL_PORTS=7878/tcp,9117/tcp . Every port in this list will be blocked on the vpn interface, so that there's no risk that they might be exposed to the world via the vpn (mostly there in case your vpn provider screws up and piece of mind). Why would you need this? Wanting to route traffic from other containers over the vpn is probably the most used scenario. wg0.conf example \u00b6 This is an example of how your wg0.conf should look like. In case you have no need for ipv6 connectivity, make sure that you've got it disabled with net.ipv6.conf.all.disable_ipv6=1 and your wg0.conf does not contain any ipv6 stuff. Also make sure you remove any PreUp, PostUp, PreDown, PostDown stuff that your provider might have added (unless you know what it does). When using Mullvad, this means that you shouldn't enable the Kill Switch option. [Interface] PrivateKey = supersecretprivatekey Address = xx.xx.xxx.xxx/32 DNS = 1.1.1.1 [Peer] PublicKey = publickey AllowedIPs = 0.0.0.0/0 Endpoint = xxx.x.xxx.x:51820 resolv.conf error message If you are seeing an error message like mv: cannot move '/etc/resolv.conf.173.openresolv' to '/etc/resolv.conf': Resource busy . Remove the DNS = 1.1.1.1 from your wg0.conf file and set the dns server using the docker cli argument --dns 1.1.1.1 or the equivalent for compose. WireGuard Go \u00b6 This image includes wireguard-go , the Go implementation of WireGuard which runs in userspace. Systems like Synology, Qnap or others with missing kernel modules can make use of this to establish a WireGuard VPN connection. It requires the following two changes. A change to your wg0.conf , due to a long lasting bug in WireGuard on these systems. You'll need to change the AllowedIPs line to have WireGuard start up properly. Also an extra PostUp might have to be added, play with them to see what works best for your particular system. [Interface] ... PostUp = wg set wg0 fwmark 51820 && ip -4 rule add not fwmark 51820 table 51820 && ip -4 rule add table main suppress_prefixlength 0 && iptables-restore -n ... ... [Peer] ... AllowedIPs = 0.0.0.0/1,128.0.0.0/1 ... Next, you'll also need to add a device mapping. cli compose --device /dev/net/tun:/dev/net/tun devices : - /dev/net/tun:/dev/net/tun","title":"hotio/qflood"},{"location":"containers/qflood/#starting-the-container","text":"cli compose cli vpn compose vpn docker run --rm \\ --name qflood \\ -p 8080 :8080 \\ -p 3000 :3000 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e FLOOD_AUTH = \"false\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/qflood version : \"3.7\" services : qflood : container_name : qflood image : cr.hotio.dev/hotio/qflood ports : - \"8080:8080\" - \"3000:3000\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - FLOOD_AUTH=false volumes : - /<host_folder_config>:/config docker run --rm \\ --name qflood \\ -p 8080 :8080 \\ -p 3000 :3000 \\ -p 8118 :8118 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e VPN_ENABLED = \"true\" \\ -e VPN_LAN_NETWORK = \"\" \\ -e VPN_CONF = \"wg0\" \\ -e VPN_ADDITIONAL_PORTS = \"\" \\ -e PRIVOXY_ENABLED = \"false\" \\ -e FLOOD_AUTH = \"false\" \\ -v /<host_folder_config>:/config \\ --cap-add = NET_ADMIN \\ --sysctl = \"net.ipv4.conf.all.src_valid_mark=1\" \\ --sysctl = \"net.ipv6.conf.all.disable_ipv6=0\" \\ cr.hotio.dev/hotio/qflood version : \"3.7\" services : qflood : container_name : qflood image : cr.hotio.dev/hotio/qflood ports : - \"8080:8080\" - \"3000:3000\" - \"8118:8118\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - VPN_ENABLED=true - VPN_LAN_NETWORK - VPN_CONF=wg0 - VPN_ADDITIONAL_PORTS - PRIVOXY_ENABLED=false - FLOOD_AUTH=false volumes : - /<host_folder_config>:/config cap_add : - NET_ADMIN sysctls : - net.ipv4.conf.all.src_valid_mark=1 - net.ipv6.conf.all.disable_ipv6=0 In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Login credentials The default qBittorrent username is admin and the default password is adminadmin . If this doesn't work you're probably running Unraid and you'll most likely have to change the internal port on which the WebUI runs to match the external port.","title":"Starting the container"},{"location":"containers/qflood/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/qflood/#changing-the-webui-port","text":"Under certain circumstances it's required to run the WebUI on a different internal port, you can do that by modifying the environment variable WEBUI_PORTS accordingly. It should be in the format xxxx/tcp,xxxx/udp , take a look at the default with docker logs (variable is printed at container start) or docker inspect .","title":"Changing the WebUI port"},{"location":"containers/qflood/#wireguard-vpn-support","text":"There needs to be a file wg0.conf located in /config/wireguard and you need to set the variable VPN_ENABLED to true for the VPN to start. The part with net.ipv6.conf.all.disable_ipv6=0 is optional or you can set it to 1 if there is no need for ipv6 and you want to disable ipv6, no attempt will be made in that case to set ip6tables rules and can prevent an error if the module ip6table_filter isn't loaded on the host. The WireGuard configuration should not have any ipv6 related stuff when ipv6 is disabled, otherwise creating the interface will fail. If your vpn provider supports ipv6 and you keep it enabled, you'll have full ipv6 connectivity over the vpn connection (confirmed with Mullvad). If for any reason there's a failure trying to setup ip6tables rules, you'll probably need to do sudo modprobe ip6table_filter on the host, this will mostly happen on systems that have ipv6 completely disabled. The environment variable VPN_LAN_NETWORK can be set to for example 192.168.1.0/24 , 192.168.1.0/24,192.168.44.0/24 or 192.168.1.33 , so you can get access to the webui or other additional ports (see below). If you need to expose additional ports you can use VPN_ADDITIONAL_PORTS , for example VPN_ADDITIONAL_PORTS=7878/tcp,9117/tcp . Every port in this list will be blocked on the vpn interface, so that there's no risk that they might be exposed to the world via the vpn (mostly there in case your vpn provider screws up and piece of mind). Why would you need this? Wanting to route traffic from other containers over the vpn is probably the most used scenario.","title":"WireGuard VPN support"},{"location":"containers/qflood/#wg0conf-example","text":"This is an example of how your wg0.conf should look like. In case you have no need for ipv6 connectivity, make sure that you've got it disabled with net.ipv6.conf.all.disable_ipv6=1 and your wg0.conf does not contain any ipv6 stuff. Also make sure you remove any PreUp, PostUp, PreDown, PostDown stuff that your provider might have added (unless you know what it does). When using Mullvad, this means that you shouldn't enable the Kill Switch option. [Interface] PrivateKey = supersecretprivatekey Address = xx.xx.xxx.xxx/32 DNS = 1.1.1.1 [Peer] PublicKey = publickey AllowedIPs = 0.0.0.0/0 Endpoint = xxx.x.xxx.x:51820 resolv.conf error message If you are seeing an error message like mv: cannot move '/etc/resolv.conf.173.openresolv' to '/etc/resolv.conf': Resource busy . Remove the DNS = 1.1.1.1 from your wg0.conf file and set the dns server using the docker cli argument --dns 1.1.1.1 or the equivalent for compose.","title":"wg0.conf example"},{"location":"containers/qflood/#wireguard-go","text":"This image includes wireguard-go , the Go implementation of WireGuard which runs in userspace. Systems like Synology, Qnap or others with missing kernel modules can make use of this to establish a WireGuard VPN connection. It requires the following two changes. A change to your wg0.conf , due to a long lasting bug in WireGuard on these systems. You'll need to change the AllowedIPs line to have WireGuard start up properly. Also an extra PostUp might have to be added, play with them to see what works best for your particular system. [Interface] ... PostUp = wg set wg0 fwmark 51820 && ip -4 rule add not fwmark 51820 table 51820 && ip -4 rule add table main suppress_prefixlength 0 && iptables-restore -n ... ... [Peer] ... AllowedIPs = 0.0.0.0/1,128.0.0.0/1 ... Next, you'll also need to add a device mapping. cli compose --device /dev/net/tun:/dev/net/tun devices : - /dev/net/tun:/dev/net/tun","title":"WireGuard Go"},{"location":"containers/radarr/","text":"GitHub docker.io / ghcr.io Radarr 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name radarr \\ -p 7878 :7878 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/radarr version : \"3.7\" services : radarr : container_name : radarr image : cr.hotio.dev/hotio/radarr ports : - \"7878:7878\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/radarr"},{"location":"containers/radarr/#starting-the-container","text":"cli compose docker run --rm \\ --name radarr \\ -p 7878 :7878 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/radarr version : \"3.7\" services : radarr : container_name : radarr image : cr.hotio.dev/hotio/radarr ports : - \"7878:7878\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files.","title":"Starting the container"},{"location":"containers/radarr/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/readarr/","text":"GitHub docker.io / ghcr.io Readarr 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name readarr \\ -p 8787 :8787 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/readarr version : \"3.7\" services : readarr : container_name : readarr image : cr.hotio.dev/hotio/readarr ports : - \"8787:8787\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/readarr"},{"location":"containers/readarr/#starting-the-container","text":"cli compose docker run --rm \\ --name readarr \\ -p 8787 :8787 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/readarr version : \"3.7\" services : readarr : container_name : readarr image : cr.hotio.dev/hotio/readarr ports : - \"8787:8787\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files.","title":"Starting the container"},{"location":"containers/readarr/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/rflood/","text":"GitHub docker.io / ghcr.io rTorrent / Flood 0 0 What is this? A docker image with rTorrent and the Flood UI, also optional WireGuard VPN support. Starting the container \u00b6 cli compose cli vpn compose vpn docker run --rm \\ --name rflood \\ -p 3000 :3000 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e FLOOD_AUTH = \"false\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/rflood version : \"3.7\" services : rflood : container_name : rflood image : cr.hotio.dev/hotio/rflood ports : - \"3000:3000\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - FLOOD_AUTH=false volumes : - /<host_folder_config>:/config docker run --rm \\ --name rflood \\ -p 3000 :3000 \\ -p 8118 :8118 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e VPN_ENABLED = \"true\" \\ -e VPN_LAN_NETWORK = \"\" \\ -e VPN_CONF = \"wg0\" \\ -e VPN_ADDITIONAL_PORTS = \"\" \\ -e PRIVOXY_ENABLED = \"false\" \\ -e FLOOD_AUTH = \"false\" \\ -v /<host_folder_config>:/config \\ --cap-add = NET_ADMIN \\ --sysctl = \"net.ipv4.conf.all.src_valid_mark=1\" \\ --sysctl = \"net.ipv6.conf.all.disable_ipv6=0\" \\ cr.hotio.dev/hotio/rflood version : \"3.7\" services : rflood : container_name : rflood image : cr.hotio.dev/hotio/rflood ports : - \"3000:3000\" - \"8118:8118\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - VPN_ENABLED=true - VPN_LAN_NETWORK - VPN_CONF=wg0 - VPN_ADDITIONAL_PORTS - PRIVOXY_ENABLED=false - FLOOD_AUTH=false volumes : - /<host_folder_config>:/config cap_add : - NET_ADMIN sysctls : - net.ipv4.conf.all.src_valid_mark=1 - net.ipv6.conf.all.disable_ipv6=0 In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit. Changing the WebUI port \u00b6 Under certain circumstances it's required to run the WebUI on a different internal port, you can do that by modifying the environment variable WEBUI_PORTS accordingly. It should be in the format xxxx/tcp,xxxx/udp , take a look at the default with docker logs (variable is printed at container start) or docker inspect . WireGuard VPN support \u00b6 There needs to be a file wg0.conf located in /config/wireguard and you need to set the variable VPN_ENABLED to true for the VPN to start. The part with net.ipv6.conf.all.disable_ipv6=0 is optional or you can set it to 1 if there is no need for ipv6 and you want to disable ipv6, no attempt will be made in that case to set ip6tables rules and can prevent an error if the module ip6table_filter isn't loaded on the host. The WireGuard configuration should not have any ipv6 related stuff when ipv6 is disabled, otherwise creating the interface will fail. If your vpn provider supports ipv6 and you keep it enabled, you'll have full ipv6 connectivity over the vpn connection (confirmed with Mullvad). If for any reason there's a failure trying to setup ip6tables rules, you'll probably need to do sudo modprobe ip6table_filter on the host, this will mostly happen on systems that have ipv6 completely disabled. The environment variable VPN_LAN_NETWORK can be set to for example 192.168.1.0/24 , 192.168.1.0/24,192.168.44.0/24 or 192.168.1.33 , so you can get access to the webui or other additional ports (see below). If you need to expose additional ports you can use VPN_ADDITIONAL_PORTS , for example VPN_ADDITIONAL_PORTS=7878/tcp,9117/tcp . Every port in this list will be blocked on the vpn interface, so that there's no risk that they might be exposed to the world via the vpn (mostly there in case your vpn provider screws up and piece of mind). Why would you need this? Wanting to route traffic from other containers over the vpn is probably the most used scenario. wg0.conf example \u00b6 This is an example of how your wg0.conf should look like. In case you have no need for ipv6 connectivity, make sure that you've got it disabled with net.ipv6.conf.all.disable_ipv6=1 and your wg0.conf does not contain any ipv6 stuff. Also make sure you remove any PreUp, PostUp, PreDown, PostDown stuff that your provider might have added (unless you know what it does). When using Mullvad, this means that you shouldn't enable the Kill Switch option. [Interface] PrivateKey = supersecretprivatekey Address = xx.xx.xxx.xxx/32 DNS = 1.1.1.1 [Peer] PublicKey = publickey AllowedIPs = 0.0.0.0/0 Endpoint = xxx.x.xxx.x:51820 resolv.conf error message If you are seeing an error message like mv: cannot move '/etc/resolv.conf.173.openresolv' to '/etc/resolv.conf': Resource busy . Remove the DNS = 1.1.1.1 from your wg0.conf file and set the dns server using the docker cli argument --dns 1.1.1.1 or the equivalent for compose. WireGuard Go \u00b6 This image includes wireguard-go , the Go implementation of WireGuard which runs in userspace. Systems like Synology, Qnap or others with missing kernel modules can make use of this to establish a WireGuard VPN connection. It requires the following two changes. A change to your wg0.conf , due to a long lasting bug in WireGuard on these systems. You'll need to change the AllowedIPs line to have WireGuard start up properly. Also an extra PostUp might have to be added, play with them to see what works best for your particular system. [Interface] ... PostUp = wg set wg0 fwmark 51820 && ip -4 rule add not fwmark 51820 table 51820 && ip -4 rule add table main suppress_prefixlength 0 && iptables-restore -n ... ... [Peer] ... AllowedIPs = 0.0.0.0/1,128.0.0.0/1 ... Next, you'll also need to add a device mapping. cli compose --device /dev/net/tun:/dev/net/tun devices : - /dev/net/tun:/dev/net/tun","title":"hotio/rflood"},{"location":"containers/rflood/#starting-the-container","text":"cli compose cli vpn compose vpn docker run --rm \\ --name rflood \\ -p 3000 :3000 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e FLOOD_AUTH = \"false\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/rflood version : \"3.7\" services : rflood : container_name : rflood image : cr.hotio.dev/hotio/rflood ports : - \"3000:3000\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - FLOOD_AUTH=false volumes : - /<host_folder_config>:/config docker run --rm \\ --name rflood \\ -p 3000 :3000 \\ -p 8118 :8118 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -e VPN_ENABLED = \"true\" \\ -e VPN_LAN_NETWORK = \"\" \\ -e VPN_CONF = \"wg0\" \\ -e VPN_ADDITIONAL_PORTS = \"\" \\ -e PRIVOXY_ENABLED = \"false\" \\ -e FLOOD_AUTH = \"false\" \\ -v /<host_folder_config>:/config \\ --cap-add = NET_ADMIN \\ --sysctl = \"net.ipv4.conf.all.src_valid_mark=1\" \\ --sysctl = \"net.ipv6.conf.all.disable_ipv6=0\" \\ cr.hotio.dev/hotio/rflood version : \"3.7\" services : rflood : container_name : rflood image : cr.hotio.dev/hotio/rflood ports : - \"3000:3000\" - \"8118:8118\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC - VPN_ENABLED=true - VPN_LAN_NETWORK - VPN_CONF=wg0 - VPN_ADDITIONAL_PORTS - PRIVOXY_ENABLED=false - FLOOD_AUTH=false volumes : - /<host_folder_config>:/config cap_add : - NET_ADMIN sysctls : - net.ipv4.conf.all.src_valid_mark=1 - net.ipv6.conf.all.disable_ipv6=0 In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files.","title":"Starting the container"},{"location":"containers/rflood/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/rflood/#changing-the-webui-port","text":"Under certain circumstances it's required to run the WebUI on a different internal port, you can do that by modifying the environment variable WEBUI_PORTS accordingly. It should be in the format xxxx/tcp,xxxx/udp , take a look at the default with docker logs (variable is printed at container start) or docker inspect .","title":"Changing the WebUI port"},{"location":"containers/rflood/#wireguard-vpn-support","text":"There needs to be a file wg0.conf located in /config/wireguard and you need to set the variable VPN_ENABLED to true for the VPN to start. The part with net.ipv6.conf.all.disable_ipv6=0 is optional or you can set it to 1 if there is no need for ipv6 and you want to disable ipv6, no attempt will be made in that case to set ip6tables rules and can prevent an error if the module ip6table_filter isn't loaded on the host. The WireGuard configuration should not have any ipv6 related stuff when ipv6 is disabled, otherwise creating the interface will fail. If your vpn provider supports ipv6 and you keep it enabled, you'll have full ipv6 connectivity over the vpn connection (confirmed with Mullvad). If for any reason there's a failure trying to setup ip6tables rules, you'll probably need to do sudo modprobe ip6table_filter on the host, this will mostly happen on systems that have ipv6 completely disabled. The environment variable VPN_LAN_NETWORK can be set to for example 192.168.1.0/24 , 192.168.1.0/24,192.168.44.0/24 or 192.168.1.33 , so you can get access to the webui or other additional ports (see below). If you need to expose additional ports you can use VPN_ADDITIONAL_PORTS , for example VPN_ADDITIONAL_PORTS=7878/tcp,9117/tcp . Every port in this list will be blocked on the vpn interface, so that there's no risk that they might be exposed to the world via the vpn (mostly there in case your vpn provider screws up and piece of mind). Why would you need this? Wanting to route traffic from other containers over the vpn is probably the most used scenario.","title":"WireGuard VPN support"},{"location":"containers/rflood/#wg0conf-example","text":"This is an example of how your wg0.conf should look like. In case you have no need for ipv6 connectivity, make sure that you've got it disabled with net.ipv6.conf.all.disable_ipv6=1 and your wg0.conf does not contain any ipv6 stuff. Also make sure you remove any PreUp, PostUp, PreDown, PostDown stuff that your provider might have added (unless you know what it does). When using Mullvad, this means that you shouldn't enable the Kill Switch option. [Interface] PrivateKey = supersecretprivatekey Address = xx.xx.xxx.xxx/32 DNS = 1.1.1.1 [Peer] PublicKey = publickey AllowedIPs = 0.0.0.0/0 Endpoint = xxx.x.xxx.x:51820 resolv.conf error message If you are seeing an error message like mv: cannot move '/etc/resolv.conf.173.openresolv' to '/etc/resolv.conf': Resource busy . Remove the DNS = 1.1.1.1 from your wg0.conf file and set the dns server using the docker cli argument --dns 1.1.1.1 or the equivalent for compose.","title":"wg0.conf example"},{"location":"containers/rflood/#wireguard-go","text":"This image includes wireguard-go , the Go implementation of WireGuard which runs in userspace. Systems like Synology, Qnap or others with missing kernel modules can make use of this to establish a WireGuard VPN connection. It requires the following two changes. A change to your wg0.conf , due to a long lasting bug in WireGuard on these systems. You'll need to change the AllowedIPs line to have WireGuard start up properly. Also an extra PostUp might have to be added, play with them to see what works best for your particular system. [Interface] ... PostUp = wg set wg0 fwmark 51820 && ip -4 rule add not fwmark 51820 table 51820 && ip -4 rule add table main suppress_prefixlength 0 && iptables-restore -n ... ... [Peer] ... AllowedIPs = 0.0.0.0/1,128.0.0.0/1 ... Next, you'll also need to add a device mapping. cli compose --device /dev/net/tun:/dev/net/tun devices : - /dev/net/tun:/dev/net/tun","title":"WireGuard Go"},{"location":"containers/sabnzbd/","text":"GitHub docker.io / ghcr.io SABnzbd 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name sabnzbd \\ -p 8080 :8080 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/sabnzbd version : \"3.7\" services : sabnzbd : container_name : sabnzbd image : cr.hotio.dev/hotio/sabnzbd ports : - \"8080:8080\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/sabnzbd"},{"location":"containers/sabnzbd/#starting-the-container","text":"cli compose docker run --rm \\ --name sabnzbd \\ -p 8080 :8080 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/sabnzbd version : \"3.7\" services : sabnzbd : container_name : sabnzbd image : cr.hotio.dev/hotio/sabnzbd ports : - \"8080:8080\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files.","title":"Starting the container"},{"location":"containers/sabnzbd/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/sonarr/","text":"GitHub docker.io / ghcr.io Sonarr 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name sonarr \\ -p 8989 :8989 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/sonarr version : \"3.7\" services : sonarr : container_name : sonarr image : cr.hotio.dev/hotio/sonarr ports : - \"8989:8989\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/sonarr"},{"location":"containers/sonarr/#starting-the-container","text":"cli compose docker run --rm \\ --name sonarr \\ -p 8989 :8989 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/sonarr version : \"3.7\" services : sonarr : container_name : sonarr image : cr.hotio.dev/hotio/sonarr ports : - \"8989:8989\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files.","title":"Starting the container"},{"location":"containers/sonarr/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/stash/","text":"GitHub docker.io / ghcr.io Stash 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name stash \\ -p 9999 :9999 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/stash version : \"3.7\" services : stash : container_name : stash image : cr.hotio.dev/hotio/stash ports : - \"9999:9999\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/stash"},{"location":"containers/stash/#starting-the-container","text":"cli compose docker run --rm \\ --name stash \\ -p 9999 :9999 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/stash version : \"3.7\" services : stash : container_name : stash image : cr.hotio.dev/hotio/stash ports : - \"9999:9999\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files.","title":"Starting the container"},{"location":"containers/stash/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/tautulli/","text":"GitHub docker.io / ghcr.io Tautulli 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name tautulli \\ -p 8181 :8181 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/tautulli version : \"3.7\" services : tautulli : container_name : tautulli image : cr.hotio.dev/hotio/tautulli ports : - \"8181:8181\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/tautulli"},{"location":"containers/tautulli/#starting-the-container","text":"cli compose docker run --rm \\ --name tautulli \\ -p 8181 :8181 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/tautulli version : \"3.7\" services : tautulli : container_name : tautulli image : cr.hotio.dev/hotio/tautulli ports : - \"8181:8181\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config","title":"Starting the container"},{"location":"containers/tautulli/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/trackarr/","text":"GitHub docker.io / ghcr.io Trackarr 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name trackarr \\ -p 7337 :7337 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/trackarr version : \"3.7\" services : trackarr : container_name : trackarr image : cr.hotio.dev/hotio/trackarr ports : - \"7337:7337\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/trackarr"},{"location":"containers/trackarr/#starting-the-container","text":"cli compose docker run --rm \\ --name trackarr \\ -p 7337 :7337 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/trackarr version : \"3.7\" services : trackarr : container_name : trackarr image : cr.hotio.dev/hotio/trackarr ports : - \"7337:7337\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config","title":"Starting the container"},{"location":"containers/trackarr/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/unpackerr/","text":"GitHub docker.io / ghcr.io Unpackerr 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name unpackerr \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/unpackerr version : \"3.7\" services : unpackerr : container_name : unpackerr image : cr.hotio.dev/hotio/unpackerr environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit. Configuration \u00b6 You can use docker environment variables or a configuration file that should be stored in /config/unpackerr.conf . Don't forget to mount your volume where Unpackerr should look to find your downloads. Take a look at the upstream project page for info on how to configure Unpackerr.","title":"hotio/unpackerr"},{"location":"containers/unpackerr/#starting-the-container","text":"cli compose docker run --rm \\ --name unpackerr \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/unpackerr version : \"3.7\" services : unpackerr : container_name : unpackerr image : cr.hotio.dev/hotio/unpackerr environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config","title":"Starting the container"},{"location":"containers/unpackerr/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"},{"location":"containers/unpackerr/#configuration","text":"You can use docker environment variables or a configuration file that should be stored in /config/unpackerr.conf . Don't forget to mount your volume where Unpackerr should look to find your downloads. Take a look at the upstream project page for info on how to configure Unpackerr.","title":"Configuration"},{"location":"containers/whisparr/","text":"GitHub docker.io / ghcr.io Whisparr 0 0 Starting the container \u00b6 cli compose docker run --rm \\ --name whisparr \\ -p 6969 :6969 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/whisparr version : \"3.7\" services : whisparr : container_name : whisparr image : cr.hotio.dev/hotio/whisparr ports : - \"6969:6969\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files. Tags \u00b6 Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"hotio/whisparr"},{"location":"containers/whisparr/#starting-the-container","text":"cli compose docker run --rm \\ --name whisparr \\ -p 6969 :6969 \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e UMASK = 002 \\ -e TZ = \"Etc/UTC\" \\ -v /<host_folder_config>:/config \\ cr.hotio.dev/hotio/whisparr version : \"3.7\" services : whisparr : container_name : whisparr image : cr.hotio.dev/hotio/whisparr ports : - \"6969:6969\" environment : - PUID=1000 - PGID=1000 - UMASK=002 - TZ=Etc/UTC volumes : - /<host_folder_config>:/config In most cases you'll need to add additional volumes, depending on your own personal preference, to get access to your files.","title":"Starting the container"},{"location":"containers/whisparr/#tags","text":"Tag Description Version Commit SHA Commit Message Last Updated Age Tags The above table reflects the current state of the Git repository. The docker repository is mainly in sync, unless builds fail or commits are pushed for which no builds are started (usually indicated with [skip ci] in the commit message). You can click on the tag's name to go to its corresponding branch on GitHub, clicking the commit sha brings you to the git diff of that commit.","title":"Tags"}]}